import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
from tensorflow.keras.optimizers import Adam

data = pd.read_csv('AAPL.csv')
data.fillna(method='ffill', inplace=True)
data['Date'] = pd.to_datetime(data['Date'])

data['SMA_10'] = data['Close'].rolling(window=10).mean()
data['SMA_30'] = data['Close'].rolling(window=30).mean()

data['Day_of_Week'] = data['Date'].dt.dayofweek
data['Month'] = data['Date'].dt.month

features = ['Close', 'SMA_10', 'SMA_30', 'Day_of_Week', 'Month']
data_features = data[features]

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data_features)

if np.isnan(scaled_data).any():
    scaled_data = np.nan_to_num(scaled_data)

def create_dataset(dataset, time_step=1):
    X, Y = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), :]
        X.append(a)
        Y.append(dataset[i + time_step, 0])  
    return np.array(X), np.array(Y)

time_step = 60
X, y = create_dataset(scaled_data, time_step)

train_size = int(len(X) * 0.67)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

rnn_model = Sequential()
rnn_model.add(SimpleRNN(units=100, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
rnn_model.add(Dropout(0.2))  # 添加Dropout层
rnn_model.add(SimpleRNN(units=100))  # 增加神经元数量
rnn_model.add(Dropout(0.2))  # 再次添加Dropout层
rnn_model.add(Dense(1))

optimizer = Adam(learning_rate=0.0005)

rnn_model.compile(optimizer=optimizer, loss='mean_squared_error')
rnn_model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)

y_pred_rnn = rnn_model.predict(X_test)

y_pred_rnn_unscaled = scaler.inverse_transform(np.concatenate((y_pred_rnn, np.zeros((len(y_pred_rnn), 4))), axis=1))[:, 0]
y_test_unscaled = scaler.inverse_transform(np.concatenate((y_test.reshape(-1, 1), np.zeros((len(y_test), 4))), axis=1))[:, 0]

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
plt.plot(data['Date'][-len(y_test):], y_test_unscaled, label='Actual Prices')
plt.plot(data['Date'][-len(y_pred_rnn):], y_pred_rnn_unscaled, label='Predicted Prices by RNN')
plt.title('Actual vs Predicted Stock Prices by RNN')
plt.xlabel('Date')
plt.ylabel('Prices')
plt.legend()
plt.show()
